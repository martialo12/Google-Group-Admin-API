{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Documentation of Google-Group-Admin-API Google-Group-Admin-API is a Python library for managing Google Cloud Platform groups via the Google Workspace Directory API. Getting Started This documentation covers the installation, configuration, and usage of the Google-Group-Admin-API.","title":"Home"},{"location":"#welcome-to-the-documentation-of-google-group-admin-api","text":"Google-Group-Admin-API is a Python library for managing Google Cloud Platform groups via the Google Workspace Directory API.","title":"Welcome to the Documentation of Google-Group-Admin-API"},{"location":"#getting-started","text":"This documentation covers the installation, configuration, and usage of the Google-Group-Admin-API.","title":"Getting Started"},{"location":"config/","text":"GoogleWorkspaceConfig Configuration class for Google Workspace API authentication. Attributes: service_account_file ( str ) \u2013 Path to the service account JSON key file. scopes ( list [ str ] ) \u2013 List of scopes required for the API access. Source code in google_workspace_group_manager/config.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class GoogleWorkspaceConfig : \"\"\" Configuration class for Google Workspace API authentication. Attributes: service_account_file (str): Path to the service account JSON key file. scopes (list[str]): List of scopes required for the API access. \"\"\" def __init__ ( self , service_account_file : str , scopes : list [ str ]) -> None : self . service_account_file = service_account_file self . scopes = scopes def get_service ( self ) -> Resource : \"\"\" Creates and returns a Google API service resource. Returns: Resource: Google API service resource. \"\"\" credentials = service_account . Credentials . from_service_account_file ( self . service_account_file , scopes = self . scopes ) return build ( 'admin' , 'directory_v1' , credentials = credentials ) get_service () Creates and returns a Google API service resource. Returns: Resource ( Resource ) \u2013 Google API service resource. google_workspace_group_manager/config.py 18 19 20 21 22 23 24 25 26 27 28 def get_service ( self ) -> Resource : \"\"\" Creates and returns a Google API service resource. Returns: Resource: Google API service resource. \"\"\" credentials = service_account . Credentials . from_service_account_file ( self . service_account_file , scopes = self . scopes ) return build ( 'admin' , 'directory_v1' , credentials = credentials )","title":"GoogleWorkspaceConfig"},{"location":"config/#googleworkspaceconfig","text":"Configuration class for Google Workspace API authentication. Attributes: service_account_file ( str ) \u2013 Path to the service account JSON key file. scopes ( list [ str ] ) \u2013 List of scopes required for the API access. Source code in google_workspace_group_manager/config.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class GoogleWorkspaceConfig : \"\"\" Configuration class for Google Workspace API authentication. Attributes: service_account_file (str): Path to the service account JSON key file. scopes (list[str]): List of scopes required for the API access. \"\"\" def __init__ ( self , service_account_file : str , scopes : list [ str ]) -> None : self . service_account_file = service_account_file self . scopes = scopes def get_service ( self ) -> Resource : \"\"\" Creates and returns a Google API service resource. Returns: Resource: Google API service resource. \"\"\" credentials = service_account . Credentials . from_service_account_file ( self . service_account_file , scopes = self . scopes ) return build ( 'admin' , 'directory_v1' , credentials = credentials )","title":"GoogleWorkspaceConfig"},{"location":"config/#google_workspace_group_manager.config.GoogleWorkspaceConfig.get_service","text":"Creates and returns a Google API service resource. Returns: Resource ( Resource ) \u2013 Google API service resource. google_workspace_group_manager/config.py 18 19 20 21 22 23 24 25 26 27 28 def get_service ( self ) -> Resource : \"\"\" Creates and returns a Google API service resource. Returns: Resource: Google API service resource. \"\"\" credentials = service_account . Credentials . from_service_account_file ( self . service_account_file , scopes = self . scopes ) return build ( 'admin' , 'directory_v1' , credentials = credentials )","title":"get_service()"},{"location":"group_manager/","text":"GoogleWorkspaceGroupManager Manages Google Workspace groups using Directory API. Attributes: config ( GoogleWorkspaceConfig ) \u2013 Configuration for API access. Source code in google_workspace_group_manager/group_manager.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 class GoogleWorkspaceGroupManager : \"\"\" Manages Google Workspace groups using Directory API. Attributes: config (GoogleWorkspaceConfig): Configuration for API access. \"\"\" def __init__ ( self , config : GoogleWorkspaceConfig ) -> None : self . config = config self . service = config . get_service () def add_member_to_group ( self , group_email : str , member_email : str , role : str ) -> Optional [ Dict [ str , Any ]]: \"\"\" Adds a member to an existing group with a specified role. Args: group_email (str): Email address of the group. member_email (str): Email address of the member to add. role (str): Role to assign ('MEMBER', 'MANAGER', 'OWNER'). Returns: Optional[Dict[str, Any]]: Result of the operation or None if error occurs. \"\"\" member = { 'email' : member_email , 'role' : role } try : return self . service . members () . insert ( groupKey = group_email , body = member ) . execute () except Exception as e : print ( f \"An error occurred: { e } \" ) return None def get_group_info ( self , group_email : str ) -> Optional [ Dict [ str , Any ]]: \"\"\" Retrieves information for a specific group. Args: group_email (str): Email address of the group. Returns: Optional[Dict[str, Any]]: Group information or None if error occurs. \"\"\" try : return self . service . groups () . get ( groupKey = group_email ) . execute () except Exception as e : print ( f \"An error occurred: { e } \" ) return None def list_google_workspace_groups ( self , your_domain : str ) -> Optional [ List [ Dict [ str , Any ]]]: \"\"\" Lists all groups in the specified Google Workspace domain. Args: your_domain (str): Google Workspace domain. Returns: Optional[List[Dict[str, Any]]]: List of groups or None if error occurs. \"\"\" try : response = self . service . groups () . list ( domain = your_domain , maxResults = 200 ) . execute () return response . get ( 'groups' , []) except Exception as e : print ( f \"An error occurred: { e } \" ) return None def create_group ( self , group_email : str , group_name : str , description : Optional [ str ] = None ) -> Optional [ Dict [ str , Any ]]: \"\"\" Creates a new group in Google Workspace. Args: group_email (str): Email for the new group. group_name (str): Name for the new group. description (Optional[str]): Description of the new group. Returns: Optional[Dict[str, Any]]: Result of the operation or None if error occurs. \"\"\" group_body = { 'email' : group_email , 'name' : group_name , 'description' : description } try : return self . service . groups () . insert ( body = group_body ) . execute () except Exception as e : print ( f \"An error occurred: { e } \" ) return None add_member_to_group ( group_email , member_email , role ) Adds a member to an existing group with a specified role. Parameters: group_email ( str ) \u2013 Email address of the group. member_email ( str ) \u2013 Email address of the member to add. role ( str ) \u2013 Role to assign ('MEMBER', 'MANAGER', 'OWNER'). Returns: Optional [ Dict [ str , Any ]] \u2013 Optional[Dict[str, Any]]: Result of the operation or None if error occurs. google_workspace_group_manager/group_manager.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def add_member_to_group ( self , group_email : str , member_email : str , role : str ) -> Optional [ Dict [ str , Any ]]: \"\"\" Adds a member to an existing group with a specified role. Args: group_email (str): Email address of the group. member_email (str): Email address of the member to add. role (str): Role to assign ('MEMBER', 'MANAGER', 'OWNER'). Returns: Optional[Dict[str, Any]]: Result of the operation or None if error occurs. \"\"\" member = { 'email' : member_email , 'role' : role } try : return self . service . members () . insert ( groupKey = group_email , body = member ) . execute () except Exception as e : print ( f \"An error occurred: { e } \" ) return None create_group ( group_email , group_name , description = None ) Creates a new group in Google Workspace. Parameters: group_email ( str ) \u2013 Email for the new group. group_name ( str ) \u2013 Name for the new group. description ( Optional [ str ] , default: None ) \u2013 Description of the new group. Returns: Optional [ Dict [ str , Any ]] \u2013 Optional[Dict[str, Any]]: Result of the operation or None if error occurs. google_workspace_group_manager/group_manager.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def create_group ( self , group_email : str , group_name : str , description : Optional [ str ] = None ) -> Optional [ Dict [ str , Any ]]: \"\"\" Creates a new group in Google Workspace. Args: group_email (str): Email for the new group. group_name (str): Name for the new group. description (Optional[str]): Description of the new group. Returns: Optional[Dict[str, Any]]: Result of the operation or None if error occurs. \"\"\" group_body = { 'email' : group_email , 'name' : group_name , 'description' : description } try : return self . service . groups () . insert ( body = group_body ) . execute () except Exception as e : print ( f \"An error occurred: { e } \" ) return None get_group_info ( group_email ) Retrieves information for a specific group. Parameters: group_email ( str ) \u2013 Email address of the group. Returns: Optional [ Dict [ str , Any ]] \u2013 Optional[Dict[str, Any]]: Group information or None if error occurs. google_workspace_group_manager/group_manager.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def get_group_info ( self , group_email : str ) -> Optional [ Dict [ str , Any ]]: \"\"\" Retrieves information for a specific group. Args: group_email (str): Email address of the group. Returns: Optional[Dict[str, Any]]: Group information or None if error occurs. \"\"\" try : return self . service . groups () . get ( groupKey = group_email ) . execute () except Exception as e : print ( f \"An error occurred: { e } \" ) return None list_google_workspace_groups ( your_domain ) Lists all groups in the specified Google Workspace domain. Parameters: your_domain ( str ) \u2013 Google Workspace domain. Returns: Optional [ List [ Dict [ str , Any ]]] \u2013 Optional[List[Dict[str, Any]]]: List of groups or None if error occurs. google_workspace_group_manager/group_manager.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def list_google_workspace_groups ( self , your_domain : str ) -> Optional [ List [ Dict [ str , Any ]]]: \"\"\" Lists all groups in the specified Google Workspace domain. Args: your_domain (str): Google Workspace domain. Returns: Optional[List[Dict[str, Any]]]: List of groups or None if error occurs. \"\"\" try : response = self . service . groups () . list ( domain = your_domain , maxResults = 200 ) . execute () return response . get ( 'groups' , []) except Exception as e : print ( f \"An error occurred: { e } \" ) return None","title":"GoogleWorkspaceGroupManager"},{"location":"group_manager/#googleworkspacegroupmanager","text":"Manages Google Workspace groups using Directory API. Attributes: config ( GoogleWorkspaceConfig ) \u2013 Configuration for API access. Source code in google_workspace_group_manager/group_manager.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 class GoogleWorkspaceGroupManager : \"\"\" Manages Google Workspace groups using Directory API. Attributes: config (GoogleWorkspaceConfig): Configuration for API access. \"\"\" def __init__ ( self , config : GoogleWorkspaceConfig ) -> None : self . config = config self . service = config . get_service () def add_member_to_group ( self , group_email : str , member_email : str , role : str ) -> Optional [ Dict [ str , Any ]]: \"\"\" Adds a member to an existing group with a specified role. Args: group_email (str): Email address of the group. member_email (str): Email address of the member to add. role (str): Role to assign ('MEMBER', 'MANAGER', 'OWNER'). Returns: Optional[Dict[str, Any]]: Result of the operation or None if error occurs. \"\"\" member = { 'email' : member_email , 'role' : role } try : return self . service . members () . insert ( groupKey = group_email , body = member ) . execute () except Exception as e : print ( f \"An error occurred: { e } \" ) return None def get_group_info ( self , group_email : str ) -> Optional [ Dict [ str , Any ]]: \"\"\" Retrieves information for a specific group. Args: group_email (str): Email address of the group. Returns: Optional[Dict[str, Any]]: Group information or None if error occurs. \"\"\" try : return self . service . groups () . get ( groupKey = group_email ) . execute () except Exception as e : print ( f \"An error occurred: { e } \" ) return None def list_google_workspace_groups ( self , your_domain : str ) -> Optional [ List [ Dict [ str , Any ]]]: \"\"\" Lists all groups in the specified Google Workspace domain. Args: your_domain (str): Google Workspace domain. Returns: Optional[List[Dict[str, Any]]]: List of groups or None if error occurs. \"\"\" try : response = self . service . groups () . list ( domain = your_domain , maxResults = 200 ) . execute () return response . get ( 'groups' , []) except Exception as e : print ( f \"An error occurred: { e } \" ) return None def create_group ( self , group_email : str , group_name : str , description : Optional [ str ] = None ) -> Optional [ Dict [ str , Any ]]: \"\"\" Creates a new group in Google Workspace. Args: group_email (str): Email for the new group. group_name (str): Name for the new group. description (Optional[str]): Description of the new group. Returns: Optional[Dict[str, Any]]: Result of the operation or None if error occurs. \"\"\" group_body = { 'email' : group_email , 'name' : group_name , 'description' : description } try : return self . service . groups () . insert ( body = group_body ) . execute () except Exception as e : print ( f \"An error occurred: { e } \" ) return None","title":"GoogleWorkspaceGroupManager"},{"location":"group_manager/#google_workspace_group_manager.group_manager.GoogleWorkspaceGroupManager.add_member_to_group","text":"Adds a member to an existing group with a specified role. Parameters: group_email ( str ) \u2013 Email address of the group. member_email ( str ) \u2013 Email address of the member to add. role ( str ) \u2013 Role to assign ('MEMBER', 'MANAGER', 'OWNER'). Returns: Optional [ Dict [ str , Any ]] \u2013 Optional[Dict[str, Any]]: Result of the operation or None if error occurs. google_workspace_group_manager/group_manager.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def add_member_to_group ( self , group_email : str , member_email : str , role : str ) -> Optional [ Dict [ str , Any ]]: \"\"\" Adds a member to an existing group with a specified role. Args: group_email (str): Email address of the group. member_email (str): Email address of the member to add. role (str): Role to assign ('MEMBER', 'MANAGER', 'OWNER'). Returns: Optional[Dict[str, Any]]: Result of the operation or None if error occurs. \"\"\" member = { 'email' : member_email , 'role' : role } try : return self . service . members () . insert ( groupKey = group_email , body = member ) . execute () except Exception as e : print ( f \"An error occurred: { e } \" ) return None","title":"add_member_to_group()"},{"location":"group_manager/#google_workspace_group_manager.group_manager.GoogleWorkspaceGroupManager.create_group","text":"Creates a new group in Google Workspace. Parameters: group_email ( str ) \u2013 Email for the new group. group_name ( str ) \u2013 Name for the new group. description ( Optional [ str ] , default: None ) \u2013 Description of the new group. Returns: Optional [ Dict [ str , Any ]] \u2013 Optional[Dict[str, Any]]: Result of the operation or None if error occurs. google_workspace_group_manager/group_manager.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def create_group ( self , group_email : str , group_name : str , description : Optional [ str ] = None ) -> Optional [ Dict [ str , Any ]]: \"\"\" Creates a new group in Google Workspace. Args: group_email (str): Email for the new group. group_name (str): Name for the new group. description (Optional[str]): Description of the new group. Returns: Optional[Dict[str, Any]]: Result of the operation or None if error occurs. \"\"\" group_body = { 'email' : group_email , 'name' : group_name , 'description' : description } try : return self . service . groups () . insert ( body = group_body ) . execute () except Exception as e : print ( f \"An error occurred: { e } \" ) return None","title":"create_group()"},{"location":"group_manager/#google_workspace_group_manager.group_manager.GoogleWorkspaceGroupManager.get_group_info","text":"Retrieves information for a specific group. Parameters: group_email ( str ) \u2013 Email address of the group. Returns: Optional [ Dict [ str , Any ]] \u2013 Optional[Dict[str, Any]]: Group information or None if error occurs. google_workspace_group_manager/group_manager.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def get_group_info ( self , group_email : str ) -> Optional [ Dict [ str , Any ]]: \"\"\" Retrieves information for a specific group. Args: group_email (str): Email address of the group. Returns: Optional[Dict[str, Any]]: Group information or None if error occurs. \"\"\" try : return self . service . groups () . get ( groupKey = group_email ) . execute () except Exception as e : print ( f \"An error occurred: { e } \" ) return None","title":"get_group_info()"},{"location":"group_manager/#google_workspace_group_manager.group_manager.GoogleWorkspaceGroupManager.list_google_workspace_groups","text":"Lists all groups in the specified Google Workspace domain. Parameters: your_domain ( str ) \u2013 Google Workspace domain. Returns: Optional [ List [ Dict [ str , Any ]]] \u2013 Optional[List[Dict[str, Any]]]: List of groups or None if error occurs. google_workspace_group_manager/group_manager.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def list_google_workspace_groups ( self , your_domain : str ) -> Optional [ List [ Dict [ str , Any ]]]: \"\"\" Lists all groups in the specified Google Workspace domain. Args: your_domain (str): Google Workspace domain. Returns: Optional[List[Dict[str, Any]]]: List of groups or None if error occurs. \"\"\" try : response = self . service . groups () . list ( domain = your_domain , maxResults = 200 ) . execute () return response . get ( 'groups' , []) except Exception as e : print ( f \"An error occurred: { e } \" ) return None","title":"list_google_workspace_groups()"}]}